# Dispatch 명령어를 통해 수동 실행
name: Deploy Spring Boot to Ubuntu Server without Docker Container

on:
  workflow_dispatch: # 수동 실행 트리거
    inputs:
      environment:
        description: "Deployment environment (e.g., staging, production)"
        required: true
        default: "production"

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # 1. 코드 체크아웃
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          ref: api # api 브랜치를 체크아웃

      # 2. JDK 설치
      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'temurin'

      # 3. Gradlew 권한 설정
      - name: Grant execute permission to Gradlew
        run: chmod +x ./gradlew

      # 4. Gradle 빌드
      - name: Build with Gradle
        run: ./gradlew clean build -x test

      # 5. 서버로 JAR 파일 전송
      - name: Transfer JAR to server
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.SERVER_HOST }}
          port: 17596 # SSH 포트 설정
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_KEY }}
          source: build/libs/server-0.0.1-SNAPSHOT.jar # 정확한 JAR 파일 지정
          target: /home/${{ secrets.SERVER_USER }}/app/
          debug: true

      # 6. 서버에서 application.properties 파일 생성
      - name: Create application.properties on server
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ secrets.SERVER_HOST }}
          port: 17596
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_KEY }}
          script: |
            # application.properties 파일 생성
            echo "spring.application.name=server" > /home/${{ secrets.SERVER_USER }}/app/build/libs/application.properties
            echo "server.port=9090" >> /home/${{ secrets.SERVER_USER }}/app/build/libs/application.properties
            echo "spring.datasource.url=${{ secrets.DB_URL }}" >> /home/${{ secrets.SERVER_USER }}/app/build/libs/application.properties
            echo "spring.datasource.username=${{ secrets.DB_USERNAME }}" >> /home/${{ secrets.SERVER_USER }}/app/build/libs/application.properties
            echo "spring.datasource.password=${{ secrets.DB_PASSWORD }}" >> /home/${{ secrets.SERVER_USER }}/app/build/libs/application.properties
            echo "spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver" >> /home/${{ secrets.SERVER_USER }}/app/build/libs/application.properties
            echo "spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQLDialect" >> /home/${{ secrets.SERVER_USER }}/app/build/libs/application.properties
            echo "spring.jpa.hibernate.ddl-auto=update" >> /home/${{ secrets.SERVER_USER }}/app/build/libs/application.properties
            echo "spring.jpa.show-sql=true" >> /home/${{ secrets.SERVER_USER }}/app/build/libs/application.properties
            echo "spring.jpa.properties.hibernate.format_sql=true" >> /home/${{ secrets.SERVER_USER }}/app/build/libs/application.properties
            echo "spring.servlet.multipart.enabled=true" >> /home/${{ secrets.SERVER_USER }}/app/build/libs/application.properties
            echo "spring.servlet.multipart.max-file-size=10MB" >> /home/${{ secrets.SERVER_USER }}/app/build/libs/application.properties
            echo "spring.servlet.multipart.max-request-size=10MB" >> /home/${{ secrets.SERVER_USER }}/app/build/libs/application.properties
            echo "api.elice.ml-api-key=${{ secrets.ML_API_KEY }}" >> /home/${{ secrets.SERVER_USER }}/app/build/libs/application.properties
